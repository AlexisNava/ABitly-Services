version: 2.1

jobs:
  activate_venv:
    docker:
      - image: circleci/python:3.6.8
    steps:
      - checkout
      - run:
          name: "Create Virtual Environment"
          command: |
            python3 -m venv env
      - run:
          name: "Activate Virtual Environment"
          command: |
            . env/bin/activate

  setup_env_variables:
    docker:
      - image: circleci/python:3.6.8
    steps:
      - checkout
      - run:
          name: "Set Up Custom Env Variables"
          command: |
            echo "FLASK_APP = 'abitly'" >> $BASH_ENV
            echo "POSTGRES_USERNAME = 'abitly'" >> $BASH_ENV
            echo "POSTGRES_PASSWORD = 'abitly2019'" >> $BASH_ENV
            echo "POSTGRES_DATABASE = 'abitlydb'" >> $BASH_ENV
            echo "POSTGRES_HOST = '0.0.0.0'" >> $BASH_ENV
            echo "POSTGRES_PORT = 5432" >> $BASH_ENV
            echo "HOST = '0.0.0.0'" >> $BASH_ENV
            echo "PORT = 5000" >> $BASH_ENV

  install_dependencies:
    docker:
      - image: circleci/python:3.6.8
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.text" }}
      - run:
          name: "Install Dependencies"
          command: pip install -r requirements.txt
      - save_cache:
          paths:
            - env
          key: deps9-{{ .Branch }}-{{ checksum "requirements.text" }}

  run_lint:
    docker:
      - image: circleci/python:3.6.8
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.text" }}
      - run:
          name: "Run Lint"
          command: pytest --pylama ...

  run_tests:
    docker:
      - image: circleci/python:3.6.8
      - image: postgres:10.3
        environment:
          POSTGRES_USER: abitly
          POSTGRES_PASSWORD: abitly2019
          POSTGRES_DB: abitlydb
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.text" }}
      - run:
          name: "Run Tests"
          command: py.test

  publish_docker_image:
    docker:
      - image: docker:19.03.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
          docker_layer_caching: true
      - run:
          name: "Docker Login"
          command: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - run:
          name: "Docker Build"
          command: docker build -t $DOCKER_REPONAME .
      - run:
          name: "Tag Image"
          command: docker tag $DOCKER_REPONAME $DOCKER_USERNAME/$DOCKER_REPONAME
      - run:
          name: "Publish Image"
          command: docker push $DOCKER_USERNAME/$DOCKER_REPONAME
